1) Что такое ООП? Преимущества и недостатки.
позволяет переложить объект из реального
мира в код таким образом, что когда
мы пишем наши программы устанавливаем
связи и взаимодействия между объектами
подобно тому как они взаимодействуют
между собой в реальном мире.
Преимущества уменьшение избыточности кода
2) Что такое инкапсуляция, полиморфизм, наследование, абстракция данных?
Инкапсуляция позволяет закрывать объект, путем установки модификатора доступа. (защита от неправильного использования, но открытая для расширения)
Наследование - один объект приобретает характеристики другого, добавляя свои собственные характеристики (дом имеет фундамент, стены, крышу, в тоже время коттедж может наследоваться от дома и добавить бассейн)
Полиморфизм - позволяет использовать одно имя для создания общих для класса действий (Например, интерфейсе bird есть метод fly, но каждая птица реализует его по разному)
Абстракция данных - выделение значимых характеристик объекта (Например у студента важные характеристики (группа, оценки, преподаватели), но нам не важнен его пол, рост, вес)
3) Что такое раннее и позднее связывание?
Позднее связывание (действия после runtime) это когда нам заранее не известно какое переменная или объект будет испозоваться (Например можем работать с bird, а не с отдельной птицой, а уже в реализации new object будет либо сокол, либо колибри)
Раннее связывание (действия до runtime) это статики(static)
4) Чем отличается declaration(объявление) от initialization(инициализация)?
Декларация - объявление переменной тип и имя(int a) Инициализация - преобретает объект (int a=0)
5) Когда мы объявили переменную, занимает ли она память?
6) Почему в Java отказались от множественного наследования?
7) Что было бы, если бы у нас было два класса, если бы они одинаковые по сигнатуре методы? Были бы проблемы?
8) Композиция и агрегация. Примеры из реального мира.
Композиция и агрегация частные случаи ассоциации. В некоторых случаях частично, а в некоторых полностью может заменить наследование 
Композиция - Объекты сцеплены, Например (колесо мотоцикла позволяет мотоциклу ехать, колесо без мотоцикла не имеет своего предназначения) 
Агрегация - Время жизни внутренного и объемлещего объекта не зависит (кресло может существовать в квартире, в офисе, ему без разницы где стоять)
9) Когда использовать абстрактный класс, а когда интерфейс?
10) Что значит immutable object и как его сделать, зачем он нужен?
11) exception
